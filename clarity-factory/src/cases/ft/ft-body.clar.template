(define-read-only (get-balance (owner principal))
  (ok (ft-get-balance {{tick}} owner))
)

(define-read-only (get-total-supply)
  (ok (ft-get-supply {{tick}}))
)

(define-read-only (get-name)
  (ok "{{fullname}}")
)

(define-read-only (get-symbol)
   (ok "{{tick}}")
)

(define-read-only (get-decimals)
  (ok u0)
)

(define-public (transfer
  (amount uint)
  (sender principal)
  (recipient principal)
  (memo (optional (buff 34)))
)
  (if (is-eq tx-sender sender)
    (begin
      (try! (ft-transfer? {{tick}} amount sender recipient))
      (print memo)
      (ok true)
    )
    (err u4)
  )
)


(define-public (burn (count uint))
  {{if enable-burn}}
  (ft-burn? {{tick}} count tx-sender)
  {{endif}}
  {{if !enable-burn}}
  ERR_FORBIDDEN
  {{endif}}
)

(define-public (get-token-uri)
  (ok (some u"{{token-uri-base}}"))
)

{{if !has-mint-limit}}
(define-public (mint (count uint))
  (ft-mint? {{tick}} count tx-sender)
)
{{endif}}
{{if has-mint-limit}}
(define-public (mint (count uint))
  (let ((already-minted (default-to u0 (map-get? mint-count tx-sender))))
    (asserts! (<= (+ already-minted count) MINT_LIMIT) ERR_UNAUTHORIZED)
    (if (is-eq already-minted u0)
      (map-insert mint-count tx-sender count)
      (map-set mint-count tx-sender (+ already-minted count))
    )
    (try! (ft-mint? {{tick}} count tx-sender))
    (ok true)
  )
)
{{endif}}